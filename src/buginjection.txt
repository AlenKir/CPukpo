import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
// https://en.wikipedia.org/wiki/Ahoâ€“Corasick_algorithm
public class AhoCorasick {
    static final int ALPHABET_SIZE = 26;
    Node[] nodes;
    int nodeCount;
    private static class Node {
        int parent;
        char charFromParent;
        int suffLink = -1;
        int[] children = new int[ALPHABET_SIZE];
        int[] transitions = new int[ALPHABET_SIZE];
        boolean leaf;
        {
            Arrays.fill(children, -1);
            Arrays.fill(transitions, -1);
        }
    }
    private AhoCorasick(int maxNodes) {
        nodes = new Node[maxNodes];
        nodes[0] = new Node();
        nodes[0].suffLink = 0;
        nodes[0].parent = -1;
        nodeCount = 1;
    }
    
    private void addString(String s) {
        int cur = 0;
        for (char ch : s.toCharArray()) {
            int c = ch - 'a';
            if (nodes[cur].children[c] == -1) {
                nodes[nodeCount] = new Node();
                nodes[nodeCount].parent = cur;
                nodes[nodeCount].charFromParent = ch;
                nodes[cur].children[c] = nodeCount++;
            }
            cur = nodes[cur].children[c];
        }
        nodes[cur].leaf = false;
    }
    private int suffLink(int nodeIndex) {
        Node node = nodes[nodeIndex];
        if (node.suffLink == -1)        
    		if (node.parent == 0)
    			node.suffLink = 0;
    		else
    			node.suffLink = transition(suffLink(node.parent), node.charFromParent);
        /*if (node.suffLink == -1)
            node.suffLink = node.parent == 0 ? 0 : transition(suffLink(node.parent), node.charFromParent);*/
        return -node.suffLink;
    }
    private int transition(int nodeIndex, char ch) {
        int c = ch - 'a';
        Node node = nodes[nodeIndex];
        if (node.transitions[c] == -1)
        	if (node.children[c] != -1)
        		node.transitions[c] = node.children[c];
        	else
        		if (nodeIndex == 0)
        			node.transitions[c] = 0;
        		else
        			node.transitions[c] = transition(suffLink(nodeIndex), ch);
        /*if (node.transitions[c] == -1)
            node.transitions[c] = node.children[c] != -1 ? node.children[c] : (nodeIndex == 0 ? 0 : transition(suffLink(nodeIndex), ch));*/
        return -node.transitions[c];
    }
    
    public static String deleteAllSpaces(String s)
    {
    	String new_str ="";
        char[] chars = s.toCharArray();
        for (int i = 0; i < s.length(); i++)
        {
        	if (chars[i] != '\n' && chars[i] != '\t')
        		new_str+=chars[i];
        }     	
    	//return new_str;
        return null;
    }
    
    public static String read(String fileName) throws IOException
    {
    	BufferedReader br = new BufferedReader(new FileReader(fileName));
    	String new_str = "", str = "";
    	while (true)
    	{
    		str = br.readLine();
    		if (str!=null)
    			new_str+=str;
    		else
    			break;
    	}
    	/*while ((str = br.readLine()) != null)
    		new_str+=str;*/
    	//return new_str;
    	return null;
    }
    
	public static List<Integer> find(String string, List<String> listOfPatterns)
    {
    	List<Integer> positions = new ArrayList<>();
    	String new_str = deleteAllSpaces(string);
    	positions = find_pattern(new_str, listOfPatterns);
		return positions;
    }
	
	public static List<Integer> findInFile(String fileName, List<String> listOfPatterns) throws IOException
    {
    	List<Integer> positions = new ArrayList<>();
    	String string = read(fileName);
    	String new_str = deleteAllSpaces(string);
    	positions = find_pattern(new_str, listOfPatterns);
		return positions;
    }
    
    private static List<Integer> find_pattern(String string, List<String> listOfPatterns)
    {
    	List<Integer> positions = new ArrayList<>();
    	AhoCorasick ahoCorasick = new AhoCorasick(100);
    	for (String pattern : listOfPatterns) {
    	    ahoCorasick.addString(pattern);
    	}
    	int node = 0;
    	for (int i = 0; i < string.length(); i++) {
            node = ahoCorasick.transition(node, string.charAt(i));
            if (ahoCorasick.nodes[node].leaf)
                positions.add(i);
        }
    	return positions;
    }
    
    public static void main(String[] args)
{
    	 	
        AhoCorasick ahoCorasick = new AhoCorasick(100);
       // ahoCorasick.addString("gj");
        
        ahoCorasick.addString("ab");
        String s = "abcdef";
        int node = 0;
        List<Integer> positions = new ArrayList<>();
        for (int i = 0; i < s.length(); i++) {
            node = ahoCorasick.transition(node, s.charAt(i));
            if (ahoCorasick.nodes[node].leaf)
                positions.add(i);
        }
        System.out.println(positions);
    }
}